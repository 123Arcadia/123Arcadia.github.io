<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java排查耗时代码</title>
    <link href="/2024/02/12/java%E6%8E%92%E6%9F%A5%E8%80%97%E6%97%B6%E4%BB%A3%E7%A0%81/"/>
    <url>/2024/02/12/java%E6%8E%92%E6%9F%A5%E8%80%97%E6%97%B6%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="java排查耗时代码的几种方式"><a href="#java排查耗时代码的几种方式" class="headerlink" title="java排查耗时代码的几种方式"></a>java排查耗时代码的几种方式</h1><h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>jstack是jdk自带的堆栈跟踪工具</p><p>首先，我们用<code>ps -ef|grep java</code>命令列出正在运行的java进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ps -ef|grep java</span><br>root        33    32 67 21:52 tty2     00:00:10 java -jar xxx.jar<br>root       101    11  0 21:52 pts/0    00:00:00 grep --color=auto java<br></code></pre></td></tr></table></figure><p><code>jstack -l [pid号]</code>命令打印线程运行情况</p><p><code>ps p  [pid号] -L -o pcpu,pid,tid,time,tname,cmd</code>打印出线程使用cpu的情况</p><p>打印结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">jstack -l 33</span><br>Full thread dump OpenJDK 64-Bit Server VM (17.0.2+8-86 mixed mode, sharing):<br><br>Threads class SMR info:<br>_java_thread_list=0x00007f3658001890, length=12, elements=&#123;<br>0x00007f369c023f10, 0x00007f369c1739b0, ...<br>&#125;<br><br>&quot;main&quot; #1 prio=5 os_prio=0 cpu=90140.00ms elapsed=98.18s tid=0x00007f369c023f10 nid=0x22 runnable  [0x00007f36a12fe000]<br>   java.lang.Thread.State: RUNNABLE<br>        at org.rocksdb.RocksDB.get(Native Method)<br>        at org.rocksdb.RocksDB.get(RocksDB.java:1965)<br>        at org.wowtools.giscat.vector.rocksrtree.TreeTransaction.get(TreeTransaction.java:74)<br>        at org.wowtools.giscat.vector.rocksrtree.TreeBuilder.getLeaf(TreeBuilder.java:186)<br>        ...<br><br>   Locked ownable synchronizers:<br>        - None<br><br>&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 cpu=0.00ms elapsed=97.06s tid=0x00007f369c1739b0 nid=0x29 waiting on condition  [0x00007f367955e000]<br>   java.lang.Thread.State: RUNNABLE<br>        at java.lang.ref.Reference.waitForReferencePendingList(java.base@17.0.2/Native Method)<br>        at java.lang.ref.Reference.processPendingReferences(java.base@17.0.2/Reference.java:253)<br>        at java.lang.ref.Reference$ReferenceHandler.run(java.base@17.0.2/Reference.java:215)<br><br>   Locked ownable synchronizers:<br>        - None<br><br>...<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ps p 33 -L -o pcpu,pid,tid,time,tname,cmd</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU   PID   TID     TIME TTY      CMD</span><br>91.9    33    33 00:01:02 tty2     /mydata/java/jdk-17/bin/java<br>87.9    33    34 00:00:59 tty2     /mydata/java/jdk-17/bin/java<br> 0.0    33    35 00:00:00 tty2     /mydata/java/jdk-17/bin/java<br> 0.0    33    36 00:00:00 tty2     /mydata/java/jdk-17/bin/java<br> ...<br><br></code></pre></td></tr></table></figure><p>现在我们知道了34号线程是最忙的，占了87.9%的CPU（33是主线程看不出什么内容），然后把34转为16进制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf &quot;0x%x\n&quot;  34<br><span class="hljs-meta prompt_"># </span><span class="language-bash">0x22</span><br></code></pre></td></tr></table></figure><p>最后，我们去查找<code>jstack -l</code> 33的输出里找关键字<strong>0x22</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;main&quot; #1 prio=5 os_prio=0 cpu=90140.00ms elapsed=98.18s tid=0x00007f369c023f10 nid=0x22 runnable  [0x00007f36a12fe000]<br>   java.lang.Thread.State: RUNNABLE<br>        at org.rocksdb.RocksDB.get(Native Method)<br>        at org.rocksdb.RocksDB.get(RocksDB.java:1965)<br>        at org.wowtools.giscat.vector.rocksrtree.TreeTransaction.get(TreeTransaction.java:74)<br>        at org.wowtools.giscat.vector.rocksrtree.TreeBuilder.getLeaf(TreeBuilder.java:186)<br>        ...<br><br></code></pre></td></tr></table></figure><p>频繁地去RocksDB里get数据，导致性能过低</p><hr><h3 id="使用阿尔萨斯Arthas"><a href="#使用阿尔萨斯Arthas" class="headerlink" title="使用阿尔萨斯Arthas"></a>使用阿尔萨斯Arthas</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用命令</title>
    <link href="/2024/02/08/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/02/08/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>基本命令了解</strong>：</p><ol><li><p>hexo -v            &#x2F;&#x2F;查看版本        </p></li><li><p>hexo init        &#x2F;&#x2F;初始化一个项目</p></li><li><p>cnpm install        </p></li><li><p>hexo clean        &#x2F;&#x2F;清理生成的文件</p></li><li><p>hexo g            &#x2F;&#x2F;生成静态网页文件，g是generate的缩写</p></li><li><p>hexo s            &#x2F;&#x2F;运行到服务器端，s是server的缩写</p></li><li><p>hexo d            &#x2F;&#x2F;部署到远端GitHub, d是deploy的缩写</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs she">// 一行<br>hexo clean &amp; hexo g -d<br></code></pre></td></tr></table></figure><ol start="8"><li><p>hexo s -p 5000    &#x2F;&#x2F;在4000端口被占用的时候，修改指定端口</p></li><li><p>cnpm uninstall hexo-cli -g    &#x2F;&#x2F;卸载hexo</p></li><li><p>npm install hexo -g #安装Hexo</p></li><li><p>npm update hexo -g #升级   </p></li><li><p><code>hexo n &quot;标题&quot; == hexo new &quot;标题&quot;</code> #新建文章</p></li><li><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</p></li><li><p>hexo server -s #静态模式</p></li><li><p>hexo server -p 5000 #更改端口</p></li><li><p>hexo server -i 192.168.1.1 #自定义 IP</p></li><li><p>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2024/02/08/%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/02/08/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><strong>hello, This is thr First!</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![缅因猫](缅因猫.jpg)<br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/%E6%B5%8B%E8%AF%95/%E7%BC%85%E5%9B%A0%E7%8C%AB.jpg" alt="缅因猫"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;% asset_img 图片文件名 图片加载失败的描述 %&#125;<br>或<br>&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;<br></code></pre></td></tr></table></figure><img src="/2024/02/08/%E6%B5%8B%E8%AF%95/%E7%BC%85%E5%9B%A0%E7%8C%AB.jpg" class="" title="缅因猫加载失败"><p>缺点：图片就会靠在左侧，大小也不由自己决定</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;img src=&quot;/img/缅因猫.jpg&quot; style=&quot;zoom:80%&quot; /&gt; <br></code></pre></td></tr></table></figure><img src="/img/缅因猫.jpg" style="zoom:80%" /> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![风铃-第二种引用](fengling)<br></code></pre></td></tr></table></figure><p><img src="/fengling" alt="风铃-第二种引用"></p><p><strong>例子</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![下雨](preview)<br></code></pre></td></tr></table></figure><p><img src="/preview" alt="下雨"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![下雨](preview.jpg)<br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/%E6%B5%8B%E8%AF%95/preview.jpg" alt="下雨"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/08/hello-world/"/>
    <url>/2024/02/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
